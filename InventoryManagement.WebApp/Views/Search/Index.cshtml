@model SearchViewModel

@{
    ViewData["Title"] = $"Search Results for '{Model.Query}'";
}

<h1>@ViewData["Title"]</h1>
<hr />

@if (!Model.FoundInventories.Any() && !Model.FoundItems.Any())
{
    <p class="text-muted">No results found.</p>
}
else
{
    <!-- Display Found Inventories -->
    @if (Model.FoundInventories.Any())
    {
        <h4 class="mt-4">Found in Inventories (@Model.FoundInventories.Count)</h4>
        <div class="list-group">
            @foreach (var inventory in Model.FoundInventories)
            {
                <a asp-controller="Inventories" asp-action="Details" asp-route-id="@inventory.Id" class="list-group-item list-group-item-action">
                    <div class="d-flex w-100 justify-content-between">
                        <h5 class="mb-1">@inventory.Title</h5>
                        <small>@inventory.CreatedAt.ToShortDateString()</small>
                    </div>
                    <p class="mb-1">@inventory.Description</p>
                </a>
            }
        </div>
    }

    <!-- Display Found Items -->
    @if (Model.FoundItems.Any())
    {
        <h4 class="mt-4">Found in Items (@Model.FoundItems.Count)</h4>
        <div class="list-group">
            @foreach (var result in Model.FoundItems)
            {
                <a asp-controller="Inventories" asp-action="Details" asp-route-id="@result.InventoryId" class="list-group-item list-group-item-action">
                    <h5 class="mb-1">Item in "@result.InventoryTitle"</h5>
                    <small class="text-muted">An item's content matched your search. Click to view the full inventory.</small>
                    @* In a more advanced view, we could show which field matched *@
                </a>
            }
        </div>
    }
}