@model List<Item>
@using Microsoft.AspNetCore.Mvc.Localization
@inject IHtmlLocalizer<InventoryManagement.WebApp.Controllers.InventoriesController> InventoriesLocalizer
@inject IViewLocalizer SharedLocalizer

@{
    var inventory = ViewBag.Inventory as Inventory;
    var orderedFields = ViewBag.OrderedFields as List<CustomFieldViewModel>;
    var currentUserId = ViewBag.CurrentUserId as int?;
    bool isAuthorizedUser = User.Identity.IsAuthenticated && (inventory.IsPublic || (currentUserId.HasValue && inventory.CreatorId == currentUserId.Value));
}

@if (isAuthorizedUser)
{
    <div class="d-flex justify-content-end mb-3">
        <a asp-controller="Items" asp-action="Create" asp-route-inventoryId="@inventory.Id" class="btn btn-success">@SharedLocalizer["Add New Item"]</a>
    </div>
}

<table class="table table-bordered table-striped align-middle">
    <thead class="thead-light">
        <tr>
            @if (orderedFields != null)
            {
                foreach (var field in orderedFields)
                {
                    if (field.State)
                    {
                        <th>@field.Name</th>
                    }
                }
            }
            <th>@SharedLocalizer["Created"]</th>
            <th>@SharedLocalizer["Actions"]</th>
        </tr>
    </thead>
    <tbody>
        @if (!Model.Any())
        {
            <tr>
                <td colspan="100%" class="text-center text-muted">
                    @if (isAuthorizedUser)
                    {
                        <span>@SharedLocalizer["No items have been added yet. Why not"] <a asp-controller="Items" asp-action="Create" asp-route-inventoryId="@inventory.Id">@SharedLocalizer["add one"]</a>?</span>
                    }
                    else
                    {
                        <span>@SharedLocalizer["No items have been added to this inventory yet."]</span>
                    }
                </td>
            </tr>
        }
        else
        {
            @foreach (var item in Model)
            {
                <tr>
                    @if (orderedFields != null)
                    {
                        foreach (var field in orderedFields)
                        {
                            if (field.State)
                            {
                                <td>
                                    @switch (field.FieldType)
                                    {
                                        case "Single-Line Text":
                                            @item.GetType().GetProperty(field.FieldKey.Replace("cs", "CustomString") + "Value")?.GetValue(item)
                                            break;
                                        case "Multi-Line Text":
                                            @item.GetType().GetProperty(field.FieldKey.Replace("ct", "CustomText") + "Value")?.GetValue(item)
                                            break;
                                        case "Numeric":
                                            @item.GetType().GetProperty(field.FieldKey.Replace("cn", "CustomNumeric") + "Value")?.GetValue(item)
                                            break;
                                        case "Select from List":
                                            @item.GetType().GetProperty(field.FieldKey.Replace("csel", "CustomSelect") + "Value")?.GetValue(item)
                                            break;
                                        case "Checkbox (Yes/No)":
                                            var boolValue = (bool?)item.GetType().GetProperty(field.FieldKey.Replace("cb", "CustomBool") + "Value")?.GetValue(item);
                                            @(boolValue == true ? SharedLocalizer["Yes"] : SharedLocalizer["No"])
                                            break;
                                        case "Document/Image Link":
                                            var linkValue = (string?)item.GetType().GetProperty(field.FieldKey.Replace("cl", "CustomLink") + "Value")?.GetValue(item);
                                            if (!string.IsNullOrEmpty(linkValue))
                                            {
                                                <a href="@linkValue" target="_blank">@SharedLocalizer["Link"]</a>
                                            }
                                            break;
                                    }
                                </td>
                            }
                        }
                    }
                    <td>@item.CreatedAt.ToShortDateString()</td>
                    <td>
                        @{
                            var userHasLiked = currentUserId.HasValue && item.Likes.Any(l => l.UserId == currentUserId.Value);
                            var buttonClass = userHasLiked ? "btn-primary" : "btn-outline-primary";
                        }
                        <button class="btn btn-sm @buttonClass like-btn" data-item-id="@item.Id" @(User.Identity.IsAuthenticated ? "" : "disabled") title="@(User.Identity.IsAuthenticated? SharedLocalizer["Like"] : SharedLocalizer["You must be logged in to like items"])">
                            <i class="bi bi-hand-thumbs-up"></i> @SharedLocalizer["Like"] <span class="badge bg-light text-dark like-count">@item.Likes.Count</span>
                        </button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>