@model CustomFieldsPageViewModel
@using Microsoft.AspNetCore.Mvc.Localization
@inject IHtmlLocalizer<InventoryManagement.WebApp.Controllers.InventoriesController> InventoriesLocalizer

@{
    ViewData["Title"] = InventoriesLocalizer["Custom Fields"];
}

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-action="Index">@InventoriesLocalizer["My Inventories"]</a></li>
        <li class="breadcrumb-item active" aria-current="page">@Model.InventoryTitle</li>
    </ol>
</nav>

<h1>@ViewData["Title"] for "@Model.InventoryTitle"</h1>
<p class="text-muted">@InventoriesLocalizer["Define the data fields for items in this inventory. Enable a field, give it a name, and set any optional validation rules."]</p>
<hr />

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success" role="alert">
        @TempData["SuccessMessage"]
    </div>
}

<form asp-action="Fields" asp-route-id="@Model.InventoryId" method="post">
    @Html.HiddenFor(m => m.InventoryId)
    @Html.HiddenFor(m => m.RowVersion)
    <input type="hidden" asp-for="FieldOrderJson" id="fieldOrderJsonInput" />
    <div asp-validation-summary="All" class="text-danger mb-3"></div>

    <div class="row" id="fields-container">
        @for (var i = 0; i < Model.Fields.Count; i++)
        {
            var field = Model.Fields[i];
            <div class="col-lg-4 col-md-6 mb-3 field-card" data-key="@field.FieldKey">
                <div class="card h-100">
                    <div class="card-header">
                        <i class="bi bi-grip-vertical" style="cursor: grab;"></i>
                        <strong>@InventoriesLocalizer[field.FieldType]</strong>
                    </div>
                    <div class="card-body">
                        <input type="hidden" asp-for="Fields[i].FieldKey" />
                        <input type="hidden" asp-for="Fields[i].FieldType" />

                        <div class="form-check form-switch mb-2">
                            <input asp-for="Fields[i].State" class="form-check-input" />
                            <label asp-for="Fields[i].State" class="form-check-label small">Enable Field</label>
                        </div>

                        <input asp-for="Fields[i].Name" class="form-control mb-2" placeholder="Field Name" />

                        @if (field.FieldType == "Single-Line Text")
                        {
                            <input asp-for="Fields[i].MaxLength" class="form-control form-control-sm" placeholder="Max Length (optional)">
                            <input asp-for="Fields[i].Regex" class="form-control form-control-sm mt-1" placeholder="Regex Pattern (optional)">
                        }
                        else if (field.FieldType == "Numeric")
                        {
                            <div class="input-group input-group-sm">
                                <input asp-for="Fields[i].MinValue" class="form-control" placeholder="Min Value">
                                <input asp-for="Fields[i].MaxValue" class="form-control" placeholder="Max Value">
                            </div>
                        }
                        else if (field.FieldType == "Select from List")
                        {
                            <textarea asp-for="Fields[i].Options" class="form-control" placeholder="Options, comma-separated" rows="2"></textarea>
                        }
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="form-group mt-4">
        <button type="submit" class="btn btn-primary">@InventoriesLocalizer["Save Fields"]</button>
        <a asp-action="Index" class="btn btn-secondary">@InventoriesLocalizer["Back to Inventories"]</a>
    </div>
</form>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const container = document.getElementById('fields-container');
            const orderInput = document.getElementById('fieldOrderJsonInput');

            function serializeOrder() {
                const keys = [];
                container.querySelectorAll('.field-card').forEach(card => {
                    keys.push(card.dataset.key);
                });
                orderInput.value = JSON.stringify(keys);
            }

            new Sortable(container, {
                animation: 150,
                handle: '.bi-grip-vertical', // Use a handle to initiate drag
                onUpdate: function () {
                    serializeOrder();
                }
            });

            // Set initial order on page load
            serializeOrder();
        });
    </script>
}